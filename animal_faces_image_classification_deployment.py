# -*- coding: utf-8 -*-
"""Animal Faces Image Classification Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Um5xGTaTY3S2wSq7Ac9zyKzhU86xRV-

###Project Name : Animal Faces Image Classification Deployment
###Project Description : This project is an implementation of an image classification model using Conv2D and Maxpooling Layer. The model is designed to classify a dataset of animal faces with a minimum training and validation set accuracy target of 80%. In this project, I use callbacks to improve training efficiency, as well as create visualization plots to see the trend of accuracy and model loss. In addition, code is included to save the model into TF-Lite format, enabling lightweight and efficient deployment of the model on various platforms.
###Dataset : https://www.kaggle.com/datasets/andrewmvd/animal-faces
###Tools : Google Colaboratory
"""

#install Kaggle
!pip install -q kaggle

from google.colab import files
files.upload()

#create a kaggle folder
! mkdir ~/.kaggle

#copy the kaggle.json to folder created
! cp kaggle.json ~/.kaggle/

#permission for the json to act
! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d andrewmvd/animal-faces

#melakukan ekstraksi pada file zip
!unzip animal-faces.zip

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Input
import numpy as np
import matplotlib.pyplot as plt
import os

base_dir = '/content/afhq'
train_dir = os.path.join(base_dir, "train")
val_dir = os.path.join(base_dir, "val")

os.listdir(train_dir)

os.listdir(val_dir)

train_dog_dir = os.path.join(train_dir,'dog')
train_wild_dir = os.path.join(train_dir,'wild')
train_cat_dir = os.path.join(train_dir,'cat')

validation_dog_dir = os.path.join(val_dir,'dog')
validation_wild_dir = os.path.join(val_dir,'wild')
validation_cat_dir = os.path.join(val_dir,'cat')

#melakukan split folder dengan menggunakan ImageDataGenerator()
datagen = ImageDataGenerator(validation_split=0.2,
                             rescale=1./255,
                             shear_range=0.2,
                             zoom_range=0.2,
                             horizontal_flip=True)

train_gene= datagen.flow_from_directory(
    train_dir,
    subset='training',
    target_size=(224,224),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical',
    shuffle=True,
    seed=42,
)

validation_gene= datagen.flow_from_directory(
    train_dir,
    subset='validation',
    target_size=(224,224),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical',
    shuffle=True,
    seed=42
)

model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(224,224,3)),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(512,activation='relu'),
        tf.keras.layers.Dense(3,activation='softmax')
])

model.summary()

int_lr = 1e-4

optimizer = tf.optimizers.Adam(lr=int_lr)
model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.94):
      print('\nAkurasi lebih dari 94%')



callbacks = myCallback()

history=model.fit(
    train_gene,
    steps_per_epoch=25,
    epochs=30,
    validation_data=validation_gene,
    verbose=1,
    callbacks=[callbacks])

plt.style.use('ggplot')
plt.plot(history.history['accuracy'],label='Training Accuracy')
plt.plot(history.history['val_accuracy'],label='Validation Accuracy')
plt.title('Accuracy Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc='upper right')
plt.show()

plt.style.use('ggplot')
plt.plot(history.history['loss'],label='Training Loss')
plt.plot(history.history['val_loss'],label='Validation Loss')
plt.title('Loss Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc='lower right')

converter=tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model=converter.convert()

with tf.io.gfile.GFile('model.tflite','wb') as f:
  f.write(tflite_model)

!ls -la | grep 'model'